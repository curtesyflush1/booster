# Multi-stage build for production
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY backend/package*.json ./backend/
COPY frontend/package*.json ./frontend/
COPY extension/package*.json ./extension/

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY . .

# Build applications
RUN cd backend && npm run build
RUN cd frontend && npm run build
RUN cd extension && npm run build

# Production stage
FROM node:18-alpine AS production

# Install system dependencies
RUN apk add --no-cache \
    curl \
    postgresql-client \
    gzip \
    tar \
    dumb-init

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy built application
COPY --from=builder --chown=nodejs:nodejs /app/backend/dist ./backend/dist
COPY --from=builder --chown=nodejs:nodejs /app/backend/node_modules ./backend/node_modules
COPY --from=builder --chown=nodejs:nodejs /app/backend/package*.json ./backend/
COPY --from=builder --chown=nodejs:nodejs /app/frontend/dist ./frontend/dist
COPY --from=builder --chown=nodejs:nodejs /app/extension/dist ./extension/dist

# Copy configuration files
COPY --chown=nodejs:nodejs backend/migrations ./backend/migrations
COPY --chown=nodejs:nodejs backend/seeds ./backend/seeds
COPY --chown=nodejs:nodejs backend/knexfile.js ./backend/
COPY --chown=nodejs:nodejs scripts ./scripts

# Create necessary directories
RUN mkdir -p logs backups && \
    chown -R nodejs:nodejs logs backups

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Switch to non-root user
USER nodejs

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start application
CMD ["node", "backend/dist/index.js"]