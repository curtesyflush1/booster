import nodemailer from 'nodemailer';

export interface SMTPConfig {
  host: string;
  port: number;
  secure: boolean;
  auth?: {
    user: string;
    pass: string;
  };
}

export interface ChannelDeliveryResult {
  channel: string;
  success: boolean;
  deliveryId?: string;
  externalId?: string;
  error?: string;
  metadata?: Record<string, any>;
}

export class EmailService {
  private static transporter: nodemailer.Transporter | null = null;

  static async sendWelcomeEmail(_user: any): Promise<{ success: boolean; error?: string }> {
    console.log('Email service disabled for deployment');
    return { success: true };
  }

  static async sendPasswordResetEmail(_user: any, _token: string): Promise<{ success: boolean; error?: string }> {
    console.log('Email service disabled for deployment');
    return { success: true };
  }

  static async sendAlert(_alert: any, _user: any): Promise<ChannelDeliveryResult> {
    console.log('Email service disabled for deployment');
    return { 
      channel: 'email',
      success: true 
    };
  }

  static async sendDigestEmail(_user: any, _alerts: any[]): Promise<{ success: boolean; error?: string }> {
    console.log('Email service disabled for deployment');
    return { success: true };
  }

  static async testEmailConfiguration(): Promise<{ success: boolean; error?: string }> {
    return { success: true };
  }

  static async testConfiguration(): Promise<{ success: boolean; error?: string }> {
    return { success: true };
  }

  static async handleEmailWebhook(_data: any): Promise<void> {
    console.log('Email webhook received');
  }

  static async getEmailStats(): Promise<any> {
    return {
      deliveryRate: 100,
      bounceRate: 0,
      complaintRate: 0
    };
  }
}