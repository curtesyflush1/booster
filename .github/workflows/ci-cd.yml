name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Code Quality and Linting
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci
          cd ../extension && npm ci

      - name: Run ESLint (Backend)
        run: cd backend && npm run lint

      - name: Run ESLint (Frontend)
        run: cd frontend && npm run lint

      - name: Run ESLint (Extension)
        run: cd extension && npm run lint

      - name: Type checking (Backend)
        run: cd backend && npx tsc --noEmit

      - name: Type checking (Frontend)
        run: cd frontend && npm run type-check

      - name: Type checking (Extension)
        run: cd extension && npx tsc --noEmit

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci
          cd ../extension && npm ci

      - name: Run npm audit (Backend)
        run: cd backend && npm audit --audit-level=moderate

      - name: Run npm audit (Frontend)
        run: cd frontend && npm audit --audit-level=moderate

      - name: Run npm audit (Extension)
        run: cd extension && npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: boosterbeacon_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci

      - name: Setup test environment
        run: |
          cd backend
          cp .env.test .env
          npm run migrate:up

      - name: Run unit tests
        run: cd backend && npm run test:unit

      - name: Run integration tests
        run: cd backend && npm run test:integration

      - name: Run security tests
        run: cd backend && npm run test:security

      - name: Run performance tests
        run: cd backend && npm run test:performance

      - name: Run E2E tests
        run: cd backend && npm run test:e2e

      - name: Generate coverage report
        run: cd backend && npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

      - name: Check coverage threshold
        run: |
          cd backend
          COVERAGE=$(npm run test:coverage --silent | grep -o 'All files.*[0-9]\+\.[0-9]\+' | grep -o '[0-9]\+\.[0-9]\+' | tail -1)
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 90" | bc -l) )); then
            echo "Coverage $COVERAGE% is below 90% threshold"
            exit 1
          fi

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend && npm ci

      - name: Run unit tests
        run: cd frontend && npm run test

      - name: Generate coverage report
        run: cd frontend && npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Cross-Browser Tests
  cross-browser-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend && npm ci

      - name: Install Playwright
        run: cd frontend && npx playwright install --with-deps

      - name: Start frontend server
        run: |
          cd frontend && npm run dev &
          sleep 10

      - name: Run cross-browser tests (Chromium)
        run: cd frontend && npm run test:browser

      - name: Run cross-browser tests (Firefox)
        run: cd frontend && npm run test:browser:firefox

      - name: Run cross-browser tests (WebKit)
        run: cd frontend && npm run test:browser:webkit

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/

  # Extension Tests
  extension-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd extension && npm ci

      - name: Build extension
        run: |
          cd extension && npm run build

      - name: Run unit tests
        run: cd extension && npm run test

      - name: Run integration tests
        run: cd extension && npm run test:integration

      - name: Generate coverage report
        run: cd extension && npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./extension/coverage/lcov.info
          flags: extension
          name: extension-coverage

  # Build and Package
  build:
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, backend-tests, frontend-tests, extension-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci
          cd ../extension && npm ci

      - name: Build backend
        run: cd backend && npm run build

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Build extension (Chrome)
        run: cd extension && npm run build:chrome

      - name: Build extension (Firefox)
        run: cd extension && npm run build:firefox

      - name: Package extension (Chrome)
        run: cd extension && npm run package:chrome

      - name: Package extension (Firefox)
        run: cd extension && npm run package:firefox

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            backend/dist/
            frontend/dist/
            extension/booster-beacon-chrome.zip
            extension/booster-beacon-firefox.zip

  # Performance Testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: [build]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: boosterbeacon_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Setup test environment
        run: |
          cd backend
          cp .env.test .env
          npm run migrate:up

      - name: Run performance tests
        run: cd backend && npm run test:performance

      - name: Run load tests with Artillery
        run: |
          cd backend
          npm install -g artillery
          artillery run tests/performance/load-test.yml

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: backend/performance-results/

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [build, performance-tests, cross-browser-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add deployment script here
          ./scripts/deploy.sh staging

      - name: Run smoke tests on staging
        run: |
          cd backend && npm run test:smoke -- --env=staging

      - name: Deploy to production
        if: success()
        run: |
          echo "Deploying to production environment..."
          ./scripts/deploy.sh production

      - name: Run smoke tests on production
        run: |
          cd backend && npm run test:smoke -- --env=production

      - name: Notify deployment success
        if: success()
        run: |
          echo "Deployment successful!"
          # Add notification logic (Slack, Discord, etc.)

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, rolling back..."
          ./scripts/deploy.sh rollback

  # Nightly Security Scan
  nightly-security:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci
          cd ../extension && npm ci

      - name: Run comprehensive security scan
        run: |
          # Run OWASP ZAP scan
          docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py \
            -t http://localhost:3000 -g gen.conf -r testreport.html

      - name: Run dependency vulnerability scan
        run: |
          npm audit --audit-level=low
          cd backend && npm audit --audit-level=low
          cd ../frontend && npm audit --audit-level=low
          cd ../extension && npm audit --audit-level=low

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: testreport.html

# Schedule nightly security scans
on:
  schedule:
    - cron: '0 2 * * *' # Run at 2 AM UTC daily