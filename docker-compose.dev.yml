version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: booster-postgres-dev
    environment:
      POSTGRES_DB: boosterbeacon_dev
      POSTGRES_USER: booster_user
      POSTGRES_PASSWORD: booster_dev_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5434:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./backend/docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U booster_user -d boosterbeacon_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - booster-network

  # PostgreSQL Test Database
  postgres-test:
    image: postgres:15-alpine
    container_name: booster-postgres-test
    environment:
      POSTGRES_DB: boosterbeacon_test
      POSTGRES_USER: booster_user
      POSTGRES_PASSWORD: booster_test_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5435:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U booster_user -d boosterbeacon_test"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - booster-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: booster-redis-dev
    ports:
      - "6380:6379"
    volumes:
      - redis_dev_data:/data
    command: redis-server --appendonly yes --requirepass booster_redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - booster-network

  # Backend API (for development)
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: booster-api-dev
    environment:
      NODE_ENV: development
      PORT: 3000
      # Allow WebSocket connections in dev without token auth for easier local testing
      DISABLE_WS_AUTH: "true"
      DATABASE_URL: postgresql://booster_user:booster_dev_password@postgres:5432/boosterbeacon_dev
      TEST_DATABASE_URL: postgresql://booster_user:booster_test_password@postgres-test:5432/boosterbeacon_test
      REDIS_URL: redis://:booster_redis_password@redis:6379
      JWT_SECRET: dev_jwt_secret_key_change_in_production
      JWT_REFRESH_SECRET: dev_jwt_refresh_secret_key_change_in_production
      LOG_LEVEL: debug
      # Allow local frontend origins in dev (CORS)
      FRONTEND_URLS: http://localhost:5173,http://192.168.1.238:5173,http://localhost:3000,http://localhost:4173
      FRONTEND_ORIGIN_REGEX: ^http://192\.168\.1\.\d+:5173$
      # SMTP configuration (dev points to your SMTP provider). Do NOT hardcode the password here.
      # Export SMTP_PASS in your shell before `docker compose up`, and it will be injected.
      # Example (bash/zsh): export SMTP_PASS='your_smtp_password'
      SMTP_HOST: smtp.porkbun.com
      SMTP_PORT: 587
      SMTP_SECURE: "false"
      SMTP_USER: admin@boosterbeacon.com
      SMTP_PASS: ${SMTP_PASS}
      SMTP_TLS_REJECT_UNAUTHORIZED: "true"
      FROM_EMAIL: admin@boosterbeacon.com
      FROM_NAME: BoosterBeacon
      SUPPORT_EMAIL: support@boosterbeacon.com
      # Optional retailer keys to suppress startup warnings in development
      BESTBUY_API_KEY: ${BESTBUY_API_KEY}
      WALMART_API_KEY: ${WALMART_API_KEY}
      DISABLE_RATE_LIMITING: "true"
      # HTTP fetching / scraping configuration
      HTTP_FETCH_PROVIDER: ${HTTP_FETCH_PROVIDER}
      FORWARD_PROXY_PROTOCOL: ${FORWARD_PROXY_PROTOCOL}
      FORWARD_PROXY_HOST: ${FORWARD_PROXY_HOST}
      FORWARD_PROXY_PORT: ${FORWARD_PROXY_PORT}
      FORWARD_PROXY_USERNAME: ${FORWARD_PROXY_USERNAME}
      FORWARD_PROXY_PASSWORD: ${FORWARD_PROXY_PASSWORD}
      GAMESTOP_BROWSER_ONLY: ${GAMESTOP_BROWSER_ONLY}
      BROWSER_API_URL: ${BROWSER_API_URL}
      BROWSER_API_TOKEN: ${BROWSER_API_TOKEN}
      # Optional per-retailer overrides (if defined in .env)
      FORWARD_PROXY_USERNAME_GAMESTOP: ${FORWARD_PROXY_USERNAME_GAMESTOP}
      FORWARD_PROXY_PASSWORD_GAMESTOP: ${FORWARD_PROXY_PASSWORD_GAMESTOP}
      FORWARD_PROXY_HOST_GAMESTOP: ${FORWARD_PROXY_HOST_GAMESTOP}
      FORWARD_PROXY_PORT_GAMESTOP: ${FORWARD_PROXY_PORT_GAMESTOP}
      FORWARD_PROXY_PROTOCOL_GAMESTOP: ${FORWARD_PROXY_PROTOCOL_GAMESTOP}
      STRIPE_PUBLISHABLE_KEY: pk_test_your_publishable_key_here
      STRIPE_SECRET_KEY: sk_test_your_secret_key_here
      STRIPE_PRO_MONTHLY_PRICE_ID: price_your_pro_monthly_price_id
      # Use the same test Price ID for other plans in dev unless you have distinct ones
      STRIPE_PRO_YEARLY_PRICE_ID: price_your_pro_yearly_price_id
      STRIPE_PREMIUM_MONTHLY_PRICE_ID: price_your_premium_monthly_price_id
      STRIPE_PRO_PLUS_PRICE_ID: price_your_pro_plus_price_id
      # Premium setup fee (Stripe env expects STRIPE_PREMIUM_SETUP_FEE_PRICE_ID)
      STRIPE_PREMIUM_SETUP_FEE_PRICE_ID: price_your_setup_fee_price_id
      # Back-compat for earlier config name used in docs
      STRIPE_SETUP_FEE_PRICE_ID: price_your_setup_fee_price_id
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      postgres-test:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - booster-network
    command: npm run dev

volumes:
  postgres_dev_data:
    driver: local
  postgres_test_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  booster-network:
    driver: bridge
